//Cory Coker
//Nick Abbott
#include <LiquidCrystal.h>
//have to get DHTlib by rob tillaart
#include <dht.h> 

LiquidCrystal lcd(9, 8, 5, 4, 3, 2); 
dht DHT; 
#define DHT11_PIN 7 

#define RDA 0x80
#define TBE 0x20 

volatile unsigned char *myUCSR0A = (unsigned char *)0x00C0;
volatile unsigned char *myUCSR0B = (unsigned char *)0x00C1;
volatile unsigned char *myUCSR0C = (unsigned char *)0x00C2;
volatile unsigned int  *myUBRR0  = (unsigned int *) 0x00C4;
volatile unsigned char *myUDR0   = (unsigned char *)0x00C6;
 
volatile unsigned char* my_ADMUX = (unsigned char*) 0x7C;
volatile unsigned char* my_ADCSRB = (unsigned char*) 0x7B;
volatile unsigned char* my_ADCSRA = (unsigned char*) 0x7A;

volatile unsigned char *myTCCR1A = (unsigned char *)0x80;
volatile unsigned char *myTCCR1B = (unsigned char *)0x81;
volatile unsigned char *myTCCR1C = (unsigned char *)0x82;
volatile unsigned char *myTIMSK1 = (unsigned char *)0x6F;
volatile unsigned int  *myTCNT1  = (unsigned int *)0x84;
volatile unsigned int  *myOCR1A  = (unsigned int *)0x88;
volatile unsigned char *myTIFR1  = (unsigned char *)0x36;

void setup() {
 // setup the UART
  U0init(9600);
  // setup the ADC
  adc_init();
  lcd.begin(16, 2);
}

void loop() 
{



int chk = DHT.read11(DHT11_PIN); 
lcd.setCursor(0,0); 
lcd.print("Temp: "); 
lcd.print(DHT.temperature); 
lcd.print((char)223); 
lcd.print("C"); 
lcd.setCursor(0,1); 
lcd.print("Humidity: "); 
lcd.print(DHT.humidity); 
lcd.print("%"); 



  // read the water sensor value by calling adc_read() and check the threshold to display the message accordingly
 unsigned int sensor_value = adc_read(0);
 unsigned int threshold = 512;
  //if the value is less than the threshold display the value on the Serial monitor
   if (sensor_value < threshold) {
U0putchar('V'); U0putchar(':'); 
    U0putchar(((sensor_value / 100) % 10) + '0'); // Hundreds place
    U0putchar(((sensor_value / 10) % 10) + '0'); // Tens place
    U0putchar((sensor_value % 10) + '0'); // Units place
    U0putchar('\n');
   }
  //if the value is over the threshold display "Water Level: High" message on the Serial monitor.
 //else {
    // Display high water level message
 //   char msg[] = "Water Level: High\n";
//    for (int i = 0; msg[i] != '\0'; i++) {
 //     U0putchar(msg[i]);
 //   }
 // }
  //Use a threshold value that works for you with your sensor. There is no fixed value as sensor's sensitivity can differ.
}



void adc_init()
{
// setup the A register
  *my_ADCSRA |= (1 << 7);
//disable the ADC trigger mode
  *my_ADCSRA &= ~(1 << 6);
 //disable the ADC interrupt
*my_ADCSRA &= ~(1 << 5);
 //set prescaler selection to slow reading
*my_ADCSRA &= ~(1 << 2);
*my_ADCSRA &= ~(1 << 1);
*my_ADCSRA &= ~(1 << 0);
  // setup the B register
//reset the channel and gain bits
*my_ADCSRB &= ~(1 << 3);
 //set free running mode
*my_ADCSRB &= ~(1 << 2); 
  *my_ADCSRB &= ~(1 << 1); 
  *my_ADCSRB &= ~(1 << 0);
  // setup the MUX Register
 //AVCC analog reference
*my_ADMUX &= ~(1 << 7); 
//AVCC analog reference
*my_ADMUX |= (1 << 6);
  //right adjust result
*my_ADMUX &= ~(1 << 5);
 //reset the channel and gain bits
*my_ADMUX &= 0xF0;
}
unsigned int adc_read(unsigned char adc_channel_num)
{
  // clear the channel selection bits (MUX 4:0)
 *my_ADMUX &= 0xF0;
  // clear the channel selection bits (MUX 5) hint: it's not in the ADMUX register
*my_ADCSRB &= ~(1 << 3); 
  //channel selection bits for channel 0
 *my_ADMUX |= (adc_channel_num & 0x0F);
  //to start a conversion
 *my_ADCSRA |= (1 << 6);
  // wait for the conversion to complete
  while((*my_ADCSRA & 0x40) != 0);
  // return the result in the ADC data register 
  volatile unsigned char* my_ADCL = (unsigned char*) 0x78;
  volatile unsigned char* my_ADCH = (unsigned char*) 0x79;
  unsigned int val = *my_ADCL;            // Read low byte
  val |= (*my_ADCH << 8); 
  return val;
}

void U0init(int U0baud)
{
 unsigned long FCPU = 16000000;
 unsigned int tbaud;
 tbaud = (FCPU / 16 / U0baud - 1);
 // Same as (FCPU / (16 * U0baud)) - 1;
 *myUCSR0A = 0x20;
 *myUCSR0B = 0x18;
 *myUCSR0C = 0x06;
 *myUBRR0  = tbaud;
}

unsigned char U0kbhit()
{
  return *myUCSR0A & RDA;
}
unsigned char U0getchar()
{
  return *myUDR0;
}
void U0putchar(unsigned char U0pdata)
{
  while((*myUCSR0A & TBE)==0);
  *myUDR0 = U0pdata;
}

void my_delay1ms()
{
 
  *myTCCR1A = 0x00;
  *myTCCR1B &= 0xF8; //stop timer
  // set the counts
  *myTCNT1 = 62499

  // start the timer
  // *myTCCR1B |= (1 << 1);  // wait for overflow
  *myTCCR1B |= 0b00000001;  // wait for overflow
  while((*myTIFR1 & 0x01)==0); 
  // stop the timer
  *myTCCR1B &= 0xF8;   
  // reset TOV           
  *myTIFR1 |= 0x01;
}
