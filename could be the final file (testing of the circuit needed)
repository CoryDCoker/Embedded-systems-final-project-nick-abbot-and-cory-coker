//Cory Coker
//Nick Abbott
#include <LiquidCrystal.h>
//have to get DHTlib by rob tillaart
#include <dht.h> 
#include <RTClib.h>

LiquidCrystal lcd(9, 8, 5, 4, 3, 2); 
dht DHT; 
#define DHT11_PIN 7 
#define isrPin 19
#define RDA 0x80
#define TBE 0x20 
 unsigned int threshold = 100;
volatile unsigned char *myUCSR0A = (unsigned char *)0x00C0;
volatile unsigned char *myUCSR0B = (unsigned char *)0x00C1;
volatile unsigned char *myUCSR0C = (unsigned char *)0x00C2;
volatile unsigned int  *myUBRR0  = (unsigned int *) 0x00C4;
volatile unsigned char *myUDR0   = (unsigned char *)0x00C6;
 
volatile unsigned char* my_ADMUX = (unsigned char*) 0x7C;
volatile unsigned char* my_ADCSRB = (unsigned char*) 0x7B;
volatile unsigned char* my_ADCSRA = (unsigned char*) 0x7A;

volatile unsigned char *myTCCR1A = (unsigned char *)0x80;
volatile unsigned char *myTCCR1B = (unsigned char *)0x81;
volatile unsigned char *myTCCR1C = (unsigned char *)0x82;
volatile unsigned char *myTIMSK1 = (unsigned char *)0x6F;
volatile unsigned int  *myTCNT1  = (unsigned int *)0x84;
volatile unsigned int  *myOCR1A  = (unsigned int *)0x88;
volatile unsigned char *myTIFR1  = (unsigned char *)0x36;

int pole1[] = {0, 0, 0, 0, 0, 1, 1, 1, 0}; // pole1, 8 step values
int pole2[] = {0, 0, 0, 1, 1, 1, 0, 0, 0}; // pole2, 8 step values
int pole3[] = {0, 1, 1, 1, 0, 0, 0, 0, 0}; // pole3, 8 step values
int pole4[] = {1, 1, 0, 0, 0, 0, 0, 1, 0}; // pole4, 8 step values

int poleStep = 0;
int dirStatus = 3; // stores direction status 3= stop (do not change)
unsigned long previousMillis = 0; 
const long interval = 60000;
int state = 0;

const char on[] = "on: ";
const char off[] = "off: ";
const char error[] = "error: ";
const char idle[] = "idle: ";

RTC_DS1307 rtc;

void INT0_ISR() {
  state = 0;
  U0printString(idle);
    DateTime now = rtc.now();
 int month= now.month();
 int day= now.day();
 int year= now.year();
 int hour= now.hour();
 int minute= now.minute();
 int second= now.second();

U0putnumber(month);
 U0putchar('/');
U0putnumber(day);
  U0putchar('/');
U0putnumber(year);
  U0putchar(' ');
U0putnumber(hour);
  U0putchar(':');
U0putnumber(minute);
  U0putchar(':');
U0putnumber(second);
U0putchar('\n');
}


unsigned int sensor_value = adc_read(0);



void setup() {
 // setup the UART
  U0init(9600);
  // setup the ADC
  adc_init();
  if (! rtc.begin()) {
    flushUSART0();
    while (1);
  }
  lcd.begin(16, 2);
   DDRB |= (1 << PB4) | (1 << PB5) | (1 << PB6) | (1 << PB7);//outputs
  DDRB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3)); // Configure PB0, PB1, PB2, PB3 as inputs
  PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2); // Enable pull-ups on PB0, PB1, PB2, 
  DDRA |= (1 << PA0) | (1 << PA1) | (1 << PA3) | (1 << PA5) | (1 << PA7);
  attachInterrupt(digitalPinToInterrupt(isrPin), INT0_ISR, RISING);


int chk = DHT.read11(DHT11_PIN); 
lcd.setCursor(0,0); 
lcd.print("Temp: "); 
lcd.print(DHT.temperature); 
lcd.print((char)223); 
lcd.print("C"); 
lcd.setCursor(0,1); 
lcd.print("Humidity: "); 
lcd.print(DHT.humidity); 
lcd.print("%"); 



}

void loop() 
{

switch (state) {
  case 1: //on
if(PINB & (1 << PB3)){
  state = 2;
   U0printString(off);
    DateTime now = rtc.now();
 int month= now.month();
 int day= now.day();
 int year= now.year();
 int hour= now.hour();
 int minute= now.minute();
 int second= now.second();

U0putnumber(month);
 U0putchar('/');
U0putnumber(day);
  U0putchar('/');
U0putnumber(year);
  U0putchar(' ');
U0putnumber(hour);
  U0putchar(':');
U0putnumber(minute);
  U0putchar(':');
U0putnumber(second);
U0putchar('\n');
}
PINA & (1 << PA0);

if (DHT.temperature <= 23){
  state = 0;
     U0printString(idle);
    DateTime now = rtc.now();
 int month= now.month();
 int day= now.day();
 int year= now.year();
 int hour= now.hour();
 int minute= now.minute();
 int second= now.second();

U0putnumber(month);
 U0putchar('/');
U0putnumber(day);
  U0putchar('/');
U0putnumber(year);
  U0putchar(' ');
U0putnumber(hour);
  U0putchar(':');
U0putnumber(minute);
  U0putchar(':');
U0putnumber(second);
U0putchar('\n');
}

sensor_value = adc_read(0);
   if (sensor_value < threshold) {
state = 3;
 U0printString(error);
  DateTime now = rtc.now();
 int month= now.month();
 int day= now.day();
 int year= now.year();
 int hour= now.hour();
 int minute= now.minute();
 int second= now.second();

U0putnumber(month);
 U0putchar('/');
U0putnumber(day);
  U0putchar('/');
U0putnumber(year);
  U0putchar(' ');
U0putnumber(hour);
  U0putchar(':');
U0putnumber(minute);
  U0putchar(':');
U0putnumber(second);
U0putchar('\n');
   }
PINA & (1 << PA1);
PINA & ~(1 << PA3);
PINA & ~(1 << PA5);
PINA & ~(1 << PA7);

if (bit_is_clear(PINB, PB2)) {
    dirStatus = 1;
  } else if (bit_is_clear(PINB, PB0)) {
    dirStatus = 2;
  } else {
    dirStatus = 3;
  }

  if (dirStatus == 1) {
    poleStep++;
    driveStepper(poleStep);
  } else if (dirStatus == 2) {
    poleStep--;
    driveStepper(poleStep);
  } else {
    driveStepper(8);
  }

  if (poleStep > 7) {
    poleStep = 0;
  }
  if (poleStep < 0) {
    poleStep = 7;
  }

    break;

  case 2: //off 
  lcd.clear();
  lcd.setCursor(7,0); 
lcd.print("OFF"); 
PINA & ~(1 << PA0);
PINA & ~(1 << PA1);
PINA & ~(1 << PA3);
PINA & (1 << PA5);
PINA & ~(1 << PA7);    
  break;

  case 3: //error
if(PINB & (1 << PB3)){
  state = 2;
  U0printString(off);
    DateTime now = rtc.now();
 int month= now.month();
 int day= now.day();
 int year= now.year();
 int hour= now.hour();
 int minute= now.minute();
 int second= now.second();

U0putnumber(month);
 U0putchar('/');
U0putnumber(day);
  U0putchar('/');
U0putnumber(year);
  U0putchar(' ');
U0putnumber(hour);
  U0putchar(':');
U0putnumber(minute);
  U0putchar(':');
U0putnumber(second);
U0putchar('\n');
}
lcd.clear();
  lcd.setCursor(5,0); 
lcd.print("error"); 
PINA & ~(1 << PA0);
PINA & ~(1 << PA1);
PINA & ~(1 << PA3);
PINA & ~(1 << PA5);
PINA & (1 << PA7);
if (bit_is_clear(PINB, PB2)) {
    dirStatus = 1;
  } else if (bit_is_clear(PINB, PB0)) {
    dirStatus = 2;
  } else {
    dirStatus = 3;
  }

  if (dirStatus == 1) {
    poleStep++;
    driveStepper(poleStep);
  } else if (dirStatus == 2) {
    poleStep--;
    driveStepper(poleStep);
  } else {
    driveStepper(8);
  }

  if (poleStep > 7) {
    poleStep = 0;
  }
  if (poleStep < 0) {
    poleStep = 7;
  }
      break;

  default: //idle no error/reset
if (DHT.temperature > 23){
  state = 1;
     U0printString(on);
    DateTime now = rtc.now();
 int month= now.month();
 int day= now.day();
 int year= now.year();
 int hour= now.hour();
 int minute= now.minute();
 int second= now.second();

U0putnumber(month);
 U0putchar('/');
U0putnumber(day);
  U0putchar('/');
U0putnumber(year);
  U0putchar(' ');
U0putnumber(hour);
  U0putchar(':');
U0putnumber(minute);
  U0putchar(':');
U0putnumber(second);
U0putchar('\n');
}

if(PINB & (1 << PB3)){

   U0printString(off);
    DateTime now = rtc.now();
 int month= now.month();
 int day= now.day();
 int year= now.year();
 int hour= now.hour();
 int minute= now.minute();
 int second= now.second();

U0putnumber(month);
 U0putchar('/');
U0putnumber(day);
  U0putchar('/');
U0putnumber(year);
  U0putchar(' ');
U0putnumber(hour);
  U0putchar(':');
U0putnumber(minute);
  U0putchar(':');
U0putnumber(second);
U0putchar('\n');
  state = 2;
}
sensor_value = adc_read(0);
   if (sensor_value < threshold) {

 U0printString(error);
  DateTime now = rtc.now();
 int month= now.month();
 int day= now.day();
 int year= now.year();
 int hour= now.hour();
 int minute= now.minute();
 int second= now.second();

U0putnumber(month);
 U0putchar('/');
U0putnumber(day);
  U0putchar('/');
U0putnumber(year);
  U0putchar(' ');
U0putnumber(hour);
  U0putchar(':');
U0putnumber(minute);
  U0putchar(':');
U0putnumber(second);
U0putchar('\n');
state = 3;
   }
PINA & ~(1 << PA0);
PINA & ~(1 << PA1);
PINA & (1 << PA3);
PINA & ~(1 << PA5);
PINA & ~(1 << PA7);if (bit_is_clear(PINB, PB2)) {
    dirStatus = 1;
  } else if (bit_is_clear(PINB, PB0)) {
    dirStatus = 2;
  } else {
    dirStatus = 3;
  }

  if (dirStatus == 1) {
    poleStep++;
    driveStepper(poleStep);
  } else if (dirStatus == 2) {
    poleStep--;
    driveStepper(poleStep);
  } else {
    driveStepper(8);
  }

  if (poleStep > 7) {
    poleStep = 0;
  }
  if (poleStep < 0) {
    poleStep = 7;
  }

    break;
}








unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval && state != 3){
    previousMillis = currentMillis;
    // Code to execute every 60s goes here
  dhtsens();
  }

my_delay1ms();
}



void adc_init()
{
// setup the A register
  *my_ADCSRA |= (1 << 7);
//disable the ADC trigger mode
  *my_ADCSRA &= ~(1 << 6);
 //disable the ADC interrupt
*my_ADCSRA &= ~(1 << 5);
 //set prescaler selection to slow reading
*my_ADCSRA &= ~(1 << 2);
*my_ADCSRA &= ~(1 << 1);
*my_ADCSRA &= ~(1 << 0);
  // setup the B register
//reset the channel and gain bits
*my_ADCSRB &= ~(1 << 3);
 //set free running mode
*my_ADCSRB &= ~(1 << 2); 
  *my_ADCSRB &= ~(1 << 1); 
  *my_ADCSRB &= ~(1 << 0);
  // setup the MUX Register
 //AVCC analog reference
*my_ADMUX &= ~(1 << 7); 
//AVCC analog reference
*my_ADMUX |= (1 << 6);
  //right adjust result
*my_ADMUX &= ~(1 << 5);
 //reset the channel and gain bits
*my_ADMUX &= 0xF0;
}
unsigned int adc_read(unsigned char adc_channel_num)
{
  // clear the channel selection bits (MUX 4:0)
 *my_ADMUX &= 0xF0;
  // clear the channel selection bits (MUX 5) hint: it's not in the ADMUX register
*my_ADCSRB &= ~(1 << 3); 
  //channel selection bits for channel 0
 *my_ADMUX |= (adc_channel_num & 0x0F);
  //to start a conversion
 *my_ADCSRA |= (1 << 6);
  // wait for the conversion to complete
  while((*my_ADCSRA & 0x40) != 0);
  // return the result in the ADC data register 
  volatile unsigned char* my_ADCL = (unsigned char*) 0x78;
  volatile unsigned char* my_ADCH = (unsigned char*) 0x79;
  unsigned int val = *my_ADCL;            // Read low byte
  val |= (*my_ADCH << 8); 
  return val;
}

void U0init(int U0baud)
{
 unsigned long FCPU = 16000000;
 unsigned int tbaud;
 tbaud = (FCPU / 16 / U0baud - 1);
 // Same as (FCPU / (16 * U0baud)) - 1;
 *myUCSR0A = 0x20;
 *myUCSR0B = 0x18;
 *myUCSR0C = 0x06;
 *myUBRR0  = tbaud;
}

unsigned char U0kbhit()
{
  return *myUCSR0A & RDA;
}
unsigned char U0getchar()
{
  return *myUDR0;
}
void U0putchar(unsigned char U0pdata)
{
  while((*myUCSR0A & TBE)==0);
  *myUDR0 = U0pdata;
}

void driveStepper(int c) {
  // Clear the upper nibble of PORTB (pins 10–13)
  PORTB &= 0x0F;

  // Set the bits corresponding to PB4, PB5, PB6, and PB7 based on the current step
  PORTB |= (pole1[c] << PB4) | (pole2[c] << PB5) | (pole3[c] << PB6) | (pole4[c] << PB7);
}

void my_delay1ms()
{
 
  *myTCCR1A = 0x00;
  *myTCCR1B &= 0xF8; //stop timer
  // set the counts
  *myTCNT1 = 62499;

  // start the timer
  // *myTCCR1B |= (1 << 1);  // wait for overflow
  *myTCCR1B |= 0b00000001;  // wait for overflow
  while((*myTIFR1 & 0x01)==0); 
  // stop the timer
  *myTCCR1B &= 0xF8;   
  // reset TOV           
  *myTIFR1 |= 0x01;
}

void dhtsens(){
  int chk = DHT.read11(DHT11_PIN); 
lcd.setCursor(0,0); 
lcd.print("Temp: "); 
lcd.print(DHT.temperature); 
lcd.print((char)223); 
lcd.print("C"); 
lcd.setCursor(0,1); 
lcd.print("Humidity: "); 
lcd.print(DHT.humidity); 
lcd.print("%"); 
}

void flushUSART0() {
  while (UCSR0A & (1 << RXC0)) {
    volatile uint8_t dummy = UDR0;
  }
}

void U0putnumber(int num) {
  char digit;

if (num == 0) {
    U0putchar('0');
    return;
  }
char temp[10];
  int i = 0;

  while (num > 0) {
    temp[i++] = '0' + (num % 10);
    num /= 10;
  }
   while (i--) {
    U0putchar(temp[i]);
  }
}

void U0printString(const char *str) {
  for (int i = 0; str[i] != '\0'; i++) {
    U0putchar(str[i]);
  }
}
